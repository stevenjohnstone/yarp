ifeq ($(shell uname), Darwin)
	SOEXT := dylib
else
	SOEXT := so
endif

CFLAGS := @CFLAGS@ -std=c99
DEFS := @DEFS@
CC := @CC@

all: build/librubyparser.$(SOEXT)

build/librubyparser.$(SOEXT): $(shell find src -name '*.c') $(shell find src -name '*.h') Makefile build include/yarp/ast.h
	$(CC) $(DEBUG_FLAGS) $(CFLAGS) $(DEFS) -Wall -Werror -Wextra -Wpedantic -Wsign-conversion -fPIC -g -fvisibility=hidden -shared -Iinclude -o $@ $(shell find src -name '*.c')

build/bugs: $(shell find bugs -name '*.c')  Makefile build include/yarp/ast.h
	clang -fsanitize=address -mllvm -asan-instrument-reads=false -O0 -fno-omit-frame-pointer -ggdb -std=c99 -Iinclude -o $@.heapoverflow $(shell find src -name '*.c') bugs/unescape.heapoverflow.c
	clang -fsanitize=address -mllvm -asan-instrument-reads=false -O0 -fno-omit-frame-pointer -ggdb -std=c99 -Iinclude -o $@.double-free $(shell find src -name '*.c') bugs/unescape.double-free.c
	clang -fsanitize=address -mllvm -asan-instrument-reads=false -O0 -fno-omit-frame-pointer -ggdb -std=c99 -Iinclude -o $@.segfault $(shell find src -name '*.c') bugs/unescape.segfault.c
	clang -fsanitize=address -mllvm -asan-instrument-reads=false -O0 -fno-omit-frame-pointer -ggdb -std=c99 -Iinclude -o $@.use-after-free $(shell find src -name '*.c') bugs/parse.use-after-free.c
	clang -fsanitize=address -mllvm -asan-instrument-reads=false -O0 -fno-omit-frame-pointer -ggdb -std=c99 -Iinclude -o $@.hang $(shell find src -name '*.c') bugs/parse.hang.c

build:
	mkdir -p build

include/yarp/ast.h: templates/include/yarp/ast.h.erb
	rake $@

clean:
	rm -f \
		build/librubyparser.$(SOEXT) \
		ext/yarp/node.c \
		include/{ast.h,node.h} \
		java/org/yarp/{AbstractNodeVisitor.java,Loader.java,Nodes.java} \
		lib/yarp/{node,serialize}.rb \
		src/{node.c,prettyprint.c,serialize.c,token_type.c}

.PHONY: clean

all-no-debug: DEBUG_FLAGS := -DNDEBUG=1
all-no-debug: OPTFLAGS := -O3
all-no-debug: all
